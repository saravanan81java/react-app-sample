{"ast":null,"code":"import { resetComponent } from '../../style';\nimport { initZoomMotion } from '../../style/motion';\nimport getArrowStyle, { getArrowOffsetToken, MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nimport { genPresetColor, genStyleHooks, mergeToken } from '../../theme/internal';\nimport { unit } from '@ant-design/cssinjs';\nimport { getArrowToken } from '../../style/roundedArrow';\nconst genTooltipStyle = token => {\n  const {\n    componentCls,\n    // ant-tooltip\n    tooltipMaxWidth,\n    tooltipColor,\n    tooltipBg,\n    tooltipBorderRadius,\n    zIndexPopup,\n    controlHeight,\n    boxShadowSecondary,\n    paddingSM,\n    paddingXS\n  } = token;\n  return [{\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      zIndex: zIndexPopup,\n      display: 'block',\n      width: 'max-content',\n      maxWidth: tooltipMaxWidth,\n      visibility: 'visible',\n      transformOrigin: \"var(--arrow-x, 50%) var(--arrow-y, 50%)\",\n      '&-hidden': {\n        display: 'none'\n      },\n      '--antd-arrow-background-color': tooltipBg,\n      // Wrapper for the tooltip content\n      [\"\".concat(componentCls, \"-inner\")]: {\n        minWidth: controlHeight,\n        minHeight: controlHeight,\n        padding: \"\".concat(unit(token.calc(paddingSM).div(2).equal()), \" \").concat(unit(paddingXS)),\n        color: tooltipColor,\n        textAlign: 'start',\n        textDecoration: 'none',\n        wordWrap: 'break-word',\n        backgroundColor: tooltipBg,\n        borderRadius: tooltipBorderRadius,\n        boxShadow: boxShadowSecondary,\n        boxSizing: 'border-box'\n      },\n      // Limit left and right placement radius\n      [[\"&-placement-left\", \"&-placement-leftTop\", \"&-placement-leftBottom\", \"&-placement-right\", \"&-placement-rightTop\", \"&-placement-rightBottom\"].join(',')]: {\n        [\"\".concat(componentCls, \"-inner\")]: {\n          borderRadius: token.min(tooltipBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)\n        }\n      },\n      [\"\".concat(componentCls, \"-content\")]: {\n        position: 'relative'\n      }\n    }), genPresetColor(token, (colorKey, _ref) => {\n      let {\n        darkColor\n      } = _ref;\n      return {\n        [\"&\".concat(componentCls, \"-\").concat(colorKey)]: {\n          [\"\".concat(componentCls, \"-inner\")]: {\n            backgroundColor: darkColor\n          },\n          [\"\".concat(componentCls, \"-arrow\")]: {\n            '--antd-arrow-background-color': darkColor\n          }\n        }\n      };\n    })), {\n      // RTL\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  },\n  // Arrow Style\n  getArrowStyle(token, 'var(--antd-arrow-background-color)'),\n  // Pure Render\n  {\n    [\"\".concat(componentCls, \"-pure\")]: {\n      position: 'relative',\n      maxWidth: 'none',\n      margin: token.sizePopupArrow\n    }\n  }];\n};\n// ============================== Export ==============================\nexport const prepareComponentToken = token => Object.assign(Object.assign({\n  zIndexPopup: token.zIndexPopupBase + 70\n}, getArrowOffsetToken({\n  contentRadius: token.borderRadius,\n  limitVerticalRadius: true\n})), getArrowToken(mergeToken(token, {\n  borderRadiusOuter: Math.min(token.borderRadiusOuter, 4)\n})));\nexport default (function (prefixCls) {\n  let injectStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const useStyle = genStyleHooks('Tooltip', token => {\n    const {\n      borderRadius,\n      colorTextLightSolid,\n      colorBgSpotlight\n    } = token;\n    const TooltipToken = mergeToken(token, {\n      // default variables\n      tooltipMaxWidth: 250,\n      tooltipColor: colorTextLightSolid,\n      tooltipBorderRadius: borderRadius,\n      tooltipBg: colorBgSpotlight\n    });\n    return [genTooltipStyle(TooltipToken), initZoomMotion(token, 'zoom-big-fast')];\n  }, prepareComponentToken, {\n    resetStyle: false,\n    // Popover use Tooltip as internal component. We do not need to handle this.\n    injectStyle\n  });\n  return useStyle(prefixCls);\n});","map":{"version":3,"names":["resetComponent","initZoomMotion","getArrowStyle","getArrowOffsetToken","MAX_VERTICAL_CONTENT_RADIUS","genPresetColor","genStyleHooks","mergeToken","unit","getArrowToken","genTooltipStyle","token","componentCls","tooltipMaxWidth","tooltipColor","tooltipBg","tooltipBorderRadius","zIndexPopup","controlHeight","boxShadowSecondary","paddingSM","paddingXS","Object","assign","position","zIndex","display","width","maxWidth","visibility","transformOrigin","concat","minWidth","minHeight","padding","calc","div","equal","color","textAlign","textDecoration","wordWrap","backgroundColor","borderRadius","boxShadow","boxSizing","join","min","colorKey","_ref","darkColor","direction","margin","sizePopupArrow","prepareComponentToken","zIndexPopupBase","contentRadius","limitVerticalRadius","borderRadiusOuter","Math","prefixCls","injectStyle","arguments","length","undefined","useStyle","colorTextLightSolid","colorBgSpotlight","TooltipToken","resetStyle"],"sources":["/Users/saravanan/node_modules/antd/es/tooltip/style/index.js"],"sourcesContent":["import { resetComponent } from '../../style';\nimport { initZoomMotion } from '../../style/motion';\nimport getArrowStyle, { getArrowOffsetToken, MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nimport { genPresetColor, genStyleHooks, mergeToken } from '../../theme/internal';\nimport { unit } from '@ant-design/cssinjs';\nimport { getArrowToken } from '../../style/roundedArrow';\nconst genTooltipStyle = token => {\n  const {\n    componentCls,\n    // ant-tooltip\n    tooltipMaxWidth,\n    tooltipColor,\n    tooltipBg,\n    tooltipBorderRadius,\n    zIndexPopup,\n    controlHeight,\n    boxShadowSecondary,\n    paddingSM,\n    paddingXS\n  } = token;\n  return [{\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      zIndex: zIndexPopup,\n      display: 'block',\n      width: 'max-content',\n      maxWidth: tooltipMaxWidth,\n      visibility: 'visible',\n      transformOrigin: `var(--arrow-x, 50%) var(--arrow-y, 50%)`,\n      '&-hidden': {\n        display: 'none'\n      },\n      '--antd-arrow-background-color': tooltipBg,\n      // Wrapper for the tooltip content\n      [`${componentCls}-inner`]: {\n        minWidth: controlHeight,\n        minHeight: controlHeight,\n        padding: `${unit(token.calc(paddingSM).div(2).equal())} ${unit(paddingXS)}`,\n        color: tooltipColor,\n        textAlign: 'start',\n        textDecoration: 'none',\n        wordWrap: 'break-word',\n        backgroundColor: tooltipBg,\n        borderRadius: tooltipBorderRadius,\n        boxShadow: boxShadowSecondary,\n        boxSizing: 'border-box'\n      },\n      // Limit left and right placement radius\n      [[`&-placement-left`, `&-placement-leftTop`, `&-placement-leftBottom`, `&-placement-right`, `&-placement-rightTop`, `&-placement-rightBottom`].join(',')]: {\n        [`${componentCls}-inner`]: {\n          borderRadius: token.min(tooltipBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)\n        }\n      },\n      [`${componentCls}-content`]: {\n        position: 'relative'\n      }\n    }), genPresetColor(token, (colorKey, _ref) => {\n      let {\n        darkColor\n      } = _ref;\n      return {\n        [`&${componentCls}-${colorKey}`]: {\n          [`${componentCls}-inner`]: {\n            backgroundColor: darkColor\n          },\n          [`${componentCls}-arrow`]: {\n            '--antd-arrow-background-color': darkColor\n          }\n        }\n      };\n    })), {\n      // RTL\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  },\n  // Arrow Style\n  getArrowStyle(token, 'var(--antd-arrow-background-color)'),\n  // Pure Render\n  {\n    [`${componentCls}-pure`]: {\n      position: 'relative',\n      maxWidth: 'none',\n      margin: token.sizePopupArrow\n    }\n  }];\n};\n// ============================== Export ==============================\nexport const prepareComponentToken = token => Object.assign(Object.assign({\n  zIndexPopup: token.zIndexPopupBase + 70\n}, getArrowOffsetToken({\n  contentRadius: token.borderRadius,\n  limitVerticalRadius: true\n})), getArrowToken(mergeToken(token, {\n  borderRadiusOuter: Math.min(token.borderRadiusOuter, 4)\n})));\nexport default (function (prefixCls) {\n  let injectStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const useStyle = genStyleHooks('Tooltip', token => {\n    const {\n      borderRadius,\n      colorTextLightSolid,\n      colorBgSpotlight\n    } = token;\n    const TooltipToken = mergeToken(token, {\n      // default variables\n      tooltipMaxWidth: 250,\n      tooltipColor: colorTextLightSolid,\n      tooltipBorderRadius: borderRadius,\n      tooltipBg: colorBgSpotlight\n    });\n    return [genTooltipStyle(TooltipToken), initZoomMotion(token, 'zoom-big-fast')];\n  }, prepareComponentToken, {\n    resetStyle: false,\n    // Popover use Tooltip as internal component. We do not need to handle this.\n    injectStyle\n  });\n  return useStyle(prefixCls);\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
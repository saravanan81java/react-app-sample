{"ast":null,"code":"import { Keyframes, unit } from '@ant-design/cssinjs';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nconst skeletonClsLoading = new Keyframes(\"ant-skeleton-loading\", {\n  '0%': {\n    backgroundPosition: '100% 50%'\n  },\n  '100%': {\n    backgroundPosition: '0 50%'\n  }\n});\nconst genSkeletonElementCommonSize = size => ({\n  height: size,\n  lineHeight: unit(size)\n});\nconst genSkeletonElementAvatarSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonColor = token => ({\n  background: token.skeletonLoadingBackground,\n  backgroundSize: '400% 100%',\n  animationName: skeletonClsLoading,\n  animationDuration: token.skeletonLoadingMotionDuration,\n  animationTimingFunction: 'ease',\n  animationIterationCount: 'infinite'\n});\nconst genSkeletonElementInputSize = (size, calc) => Object.assign({\n  width: calc(size).mul(5).equal(),\n  minWidth: calc(size).mul(5).equal()\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementAvatar = token => {\n  const {\n    skeletonAvatarCls,\n    gradientFromColor,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM\n  } = token;\n  return {\n    [\"\".concat(skeletonAvatarCls)]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor\n    }, genSkeletonElementAvatarSize(controlHeight)),\n    [\"\".concat(skeletonAvatarCls).concat(skeletonAvatarCls, \"-circle\")]: {\n      borderRadius: '50%'\n    },\n    [\"\".concat(skeletonAvatarCls).concat(skeletonAvatarCls, \"-lg\")]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n    [\"\".concat(skeletonAvatarCls).concat(skeletonAvatarCls, \"-sm\")]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementInput = token => {\n  const {\n    controlHeight,\n    borderRadiusSM,\n    skeletonInputCls,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor,\n    calc\n  } = token;\n  return {\n    [\"\".concat(skeletonInputCls)]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementInputSize(controlHeight, calc)),\n    [\"\".concat(skeletonInputCls, \"-lg\")]: Object.assign({}, genSkeletonElementInputSize(controlHeightLG, calc)),\n    [\"\".concat(skeletonInputCls, \"-sm\")]: Object.assign({}, genSkeletonElementInputSize(controlHeightSM, calc))\n  };\n};\nconst genSkeletonElementImageSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementImage = token => {\n  const {\n    skeletonImageCls,\n    imageSizeBase,\n    gradientFromColor,\n    borderRadiusSM,\n    calc\n  } = token;\n  return {\n    [\"\".concat(skeletonImageCls)]: Object.assign(Object.assign({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementImageSize(calc(imageSizeBase).mul(2).equal())), {\n      [\"\".concat(skeletonImageCls, \"-path\")]: {\n        fill: '#bfbfbf'\n      },\n      [\"\".concat(skeletonImageCls, \"-svg\")]: Object.assign(Object.assign({}, genSkeletonElementImageSize(imageSizeBase)), {\n        maxWidth: calc(imageSizeBase).mul(4).equal(),\n        maxHeight: calc(imageSizeBase).mul(4).equal()\n      }),\n      [\"\".concat(skeletonImageCls, \"-svg\").concat(skeletonImageCls, \"-svg-circle\")]: {\n        borderRadius: '50%'\n      }\n    }),\n    [\"\".concat(skeletonImageCls).concat(skeletonImageCls, \"-circle\")]: {\n      borderRadius: '50%'\n    }\n  };\n};\nconst genSkeletonElementButtonShape = (token, size, buttonCls) => {\n  const {\n    skeletonButtonCls\n  } = token;\n  return {\n    [\"\".concat(buttonCls).concat(skeletonButtonCls, \"-circle\")]: {\n      width: size,\n      minWidth: size,\n      borderRadius: '50%'\n    },\n    [\"\".concat(buttonCls).concat(skeletonButtonCls, \"-round\")]: {\n      borderRadius: size\n    }\n  };\n};\nconst genSkeletonElementButtonSize = (size, calc) => Object.assign({\n  width: calc(size).mul(2).equal(),\n  minWidth: calc(size).mul(2).equal()\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementButton = token => {\n  const {\n    borderRadiusSM,\n    skeletonButtonCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor,\n    calc\n  } = token;\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    [\"\".concat(skeletonButtonCls)]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM,\n      width: calc(controlHeight).mul(2).equal(),\n      minWidth: calc(controlHeight).mul(2).equal()\n    }, genSkeletonElementButtonSize(controlHeight, calc))\n  }, genSkeletonElementButtonShape(token, controlHeight, skeletonButtonCls)), {\n    [\"\".concat(skeletonButtonCls, \"-lg\")]: Object.assign({}, genSkeletonElementButtonSize(controlHeightLG, calc))\n  }), genSkeletonElementButtonShape(token, controlHeightLG, \"\".concat(skeletonButtonCls, \"-lg\"))), {\n    [\"\".concat(skeletonButtonCls, \"-sm\")]: Object.assign({}, genSkeletonElementButtonSize(controlHeightSM, calc))\n  }), genSkeletonElementButtonShape(token, controlHeightSM, \"\".concat(skeletonButtonCls, \"-sm\")));\n};\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    skeletonAvatarCls,\n    skeletonTitleCls,\n    skeletonParagraphCls,\n    skeletonButtonCls,\n    skeletonInputCls,\n    skeletonImageCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor,\n    padding,\n    marginSM,\n    borderRadius,\n    titleHeight,\n    blockRadius,\n    paragraphLiHeight,\n    controlHeightXS,\n    paragraphMarginTop\n  } = token;\n  return {\n    [\"\".concat(componentCls)]: {\n      display: 'table',\n      width: '100%',\n      [\"\".concat(componentCls, \"-header\")]: {\n        display: 'table-cell',\n        paddingInlineEnd: padding,\n        verticalAlign: 'top',\n        // Avatar\n        [\"\".concat(skeletonAvatarCls)]: Object.assign({\n          display: 'inline-block',\n          verticalAlign: 'top',\n          background: gradientFromColor\n        }, genSkeletonElementAvatarSize(controlHeight)),\n        [\"\".concat(skeletonAvatarCls, \"-circle\")]: {\n          borderRadius: '50%'\n        },\n        [\"\".concat(skeletonAvatarCls, \"-lg\")]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n        [\"\".concat(skeletonAvatarCls, \"-sm\")]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n      },\n      [\"\".concat(componentCls, \"-content\")]: {\n        display: 'table-cell',\n        width: '100%',\n        verticalAlign: 'top',\n        // Title\n        [\"\".concat(skeletonTitleCls)]: {\n          width: '100%',\n          height: titleHeight,\n          background: gradientFromColor,\n          borderRadius: blockRadius,\n          [\"+ \".concat(skeletonParagraphCls)]: {\n            marginBlockStart: controlHeightSM\n          }\n        },\n        // paragraph\n        [\"\".concat(skeletonParagraphCls)]: {\n          padding: 0,\n          '> li': {\n            width: '100%',\n            height: paragraphLiHeight,\n            listStyle: 'none',\n            background: gradientFromColor,\n            borderRadius: blockRadius,\n            '+ li': {\n              marginBlockStart: controlHeightXS\n            }\n          }\n        },\n        [\"\".concat(skeletonParagraphCls, \"> li:last-child:not(:first-child):not(:nth-child(2))\")]: {\n          width: '61%'\n        }\n      },\n      [\"&-round \".concat(componentCls, \"-content\")]: {\n        [\"\".concat(skeletonTitleCls, \", \").concat(skeletonParagraphCls, \" > li\")]: {\n          borderRadius\n        }\n      }\n    },\n    [\"\".concat(componentCls, \"-with-avatar \").concat(componentCls, \"-content\")]: {\n      // Title\n      [\"\".concat(skeletonTitleCls)]: {\n        marginBlockStart: marginSM,\n        [\"+ \".concat(skeletonParagraphCls)]: {\n          marginBlockStart: paragraphMarginTop\n        }\n      }\n    },\n    // Skeleton element\n    [\"\".concat(componentCls).concat(componentCls, \"-element\")]: Object.assign(Object.assign(Object.assign(Object.assign({\n      display: 'inline-block',\n      width: 'auto'\n    }, genSkeletonElementButton(token)), genSkeletonElementAvatar(token)), genSkeletonElementInput(token)), genSkeletonElementImage(token)),\n    // Skeleton Block Button, Input\n    [\"\".concat(componentCls).concat(componentCls, \"-block\")]: {\n      width: '100%',\n      [\"\".concat(skeletonButtonCls)]: {\n        width: '100%'\n      },\n      [\"\".concat(skeletonInputCls)]: {\n        width: '100%'\n      }\n    },\n    // With active animation\n    [\"\".concat(componentCls).concat(componentCls, \"-active\")]: {\n      [\"\\n        \".concat(skeletonTitleCls, \",\\n        \").concat(skeletonParagraphCls, \" > li,\\n        \").concat(skeletonAvatarCls, \",\\n        \").concat(skeletonButtonCls, \",\\n        \").concat(skeletonInputCls, \",\\n        \").concat(skeletonImageCls, \"\\n      \")]: Object.assign({}, genSkeletonColor(token))\n    }\n  };\n};\n// ============================== Export ==============================\nexport const prepareComponentToken = token => {\n  const {\n    colorFillContent,\n    colorFill\n  } = token;\n  const gradientFromColor = colorFillContent;\n  const gradientToColor = colorFill;\n  return {\n    color: gradientFromColor,\n    colorGradientEnd: gradientToColor,\n    gradientFromColor,\n    gradientToColor,\n    titleHeight: token.controlHeight / 2,\n    blockRadius: token.borderRadiusSM,\n    paragraphMarginTop: token.marginLG + token.marginXXS,\n    paragraphLiHeight: token.controlHeight / 2\n  };\n};\nexport default genStyleHooks('Skeleton', token => {\n  const {\n    componentCls,\n    calc\n  } = token;\n  const skeletonToken = mergeToken(token, {\n    skeletonAvatarCls: \"\".concat(componentCls, \"-avatar\"),\n    skeletonTitleCls: \"\".concat(componentCls, \"-title\"),\n    skeletonParagraphCls: \"\".concat(componentCls, \"-paragraph\"),\n    skeletonButtonCls: \"\".concat(componentCls, \"-button\"),\n    skeletonInputCls: \"\".concat(componentCls, \"-input\"),\n    skeletonImageCls: \"\".concat(componentCls, \"-image\"),\n    imageSizeBase: calc(token.controlHeight).mul(1.5).equal(),\n    borderRadius: 100,\n    // Large number to make capsule shape\n    skeletonLoadingBackground: \"linear-gradient(90deg, \".concat(token.gradientFromColor, \" 25%, \").concat(token.gradientToColor, \" 37%, \").concat(token.gradientFromColor, \" 63%)\"),\n    skeletonLoadingMotionDuration: '1.4s'\n  });\n  return [genBaseStyle(skeletonToken)];\n}, prepareComponentToken, {\n  deprecatedTokens: [['color', 'gradientFromColor'], ['colorGradientEnd', 'gradientToColor']]\n});","map":{"version":3,"names":["Keyframes","unit","genStyleHooks","mergeToken","skeletonClsLoading","backgroundPosition","genSkeletonElementCommonSize","size","height","lineHeight","genSkeletonElementAvatarSize","Object","assign","width","genSkeletonColor","token","background","skeletonLoadingBackground","backgroundSize","animationName","animationDuration","skeletonLoadingMotionDuration","animationTimingFunction","animationIterationCount","genSkeletonElementInputSize","calc","mul","equal","minWidth","genSkeletonElementAvatar","skeletonAvatarCls","gradientFromColor","controlHeight","controlHeightLG","controlHeightSM","concat","display","verticalAlign","borderRadius","genSkeletonElementInput","borderRadiusSM","skeletonInputCls","genSkeletonElementImageSize","genSkeletonElementImage","skeletonImageCls","imageSizeBase","alignItems","justifyContent","fill","maxWidth","maxHeight","genSkeletonElementButtonShape","buttonCls","skeletonButtonCls","genSkeletonElementButtonSize","genSkeletonElementButton","genBaseStyle","componentCls","skeletonTitleCls","skeletonParagraphCls","padding","marginSM","titleHeight","blockRadius","paragraphLiHeight","controlHeightXS","paragraphMarginTop","paddingInlineEnd","marginBlockStart","listStyle","prepareComponentToken","colorFillContent","colorFill","gradientToColor","color","colorGradientEnd","marginLG","marginXXS","skeletonToken","deprecatedTokens"],"sources":["/Users/saravanan/node_modules/antd/es/skeleton/style/index.js"],"sourcesContent":["import { Keyframes, unit } from '@ant-design/cssinjs';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nconst skeletonClsLoading = new Keyframes(`ant-skeleton-loading`, {\n  '0%': {\n    backgroundPosition: '100% 50%'\n  },\n  '100%': {\n    backgroundPosition: '0 50%'\n  }\n});\nconst genSkeletonElementCommonSize = size => ({\n  height: size,\n  lineHeight: unit(size)\n});\nconst genSkeletonElementAvatarSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonColor = token => ({\n  background: token.skeletonLoadingBackground,\n  backgroundSize: '400% 100%',\n  animationName: skeletonClsLoading,\n  animationDuration: token.skeletonLoadingMotionDuration,\n  animationTimingFunction: 'ease',\n  animationIterationCount: 'infinite'\n});\nconst genSkeletonElementInputSize = (size, calc) => Object.assign({\n  width: calc(size).mul(5).equal(),\n  minWidth: calc(size).mul(5).equal()\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementAvatar = token => {\n  const {\n    skeletonAvatarCls,\n    gradientFromColor,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM\n  } = token;\n  return {\n    [`${skeletonAvatarCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor\n    }, genSkeletonElementAvatarSize(controlHeight)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-circle`]: {\n      borderRadius: '50%'\n    },\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementInput = token => {\n  const {\n    controlHeight,\n    borderRadiusSM,\n    skeletonInputCls,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor,\n    calc\n  } = token;\n  return {\n    [`${skeletonInputCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementInputSize(controlHeight, calc)),\n    [`${skeletonInputCls}-lg`]: Object.assign({}, genSkeletonElementInputSize(controlHeightLG, calc)),\n    [`${skeletonInputCls}-sm`]: Object.assign({}, genSkeletonElementInputSize(controlHeightSM, calc))\n  };\n};\nconst genSkeletonElementImageSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementImage = token => {\n  const {\n    skeletonImageCls,\n    imageSizeBase,\n    gradientFromColor,\n    borderRadiusSM,\n    calc\n  } = token;\n  return {\n    [`${skeletonImageCls}`]: Object.assign(Object.assign({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementImageSize(calc(imageSizeBase).mul(2).equal())), {\n      [`${skeletonImageCls}-path`]: {\n        fill: '#bfbfbf'\n      },\n      [`${skeletonImageCls}-svg`]: Object.assign(Object.assign({}, genSkeletonElementImageSize(imageSizeBase)), {\n        maxWidth: calc(imageSizeBase).mul(4).equal(),\n        maxHeight: calc(imageSizeBase).mul(4).equal()\n      }),\n      [`${skeletonImageCls}-svg${skeletonImageCls}-svg-circle`]: {\n        borderRadius: '50%'\n      }\n    }),\n    [`${skeletonImageCls}${skeletonImageCls}-circle`]: {\n      borderRadius: '50%'\n    }\n  };\n};\nconst genSkeletonElementButtonShape = (token, size, buttonCls) => {\n  const {\n    skeletonButtonCls\n  } = token;\n  return {\n    [`${buttonCls}${skeletonButtonCls}-circle`]: {\n      width: size,\n      minWidth: size,\n      borderRadius: '50%'\n    },\n    [`${buttonCls}${skeletonButtonCls}-round`]: {\n      borderRadius: size\n    }\n  };\n};\nconst genSkeletonElementButtonSize = (size, calc) => Object.assign({\n  width: calc(size).mul(2).equal(),\n  minWidth: calc(size).mul(2).equal()\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementButton = token => {\n  const {\n    borderRadiusSM,\n    skeletonButtonCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor,\n    calc\n  } = token;\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    [`${skeletonButtonCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM,\n      width: calc(controlHeight).mul(2).equal(),\n      minWidth: calc(controlHeight).mul(2).equal()\n    }, genSkeletonElementButtonSize(controlHeight, calc))\n  }, genSkeletonElementButtonShape(token, controlHeight, skeletonButtonCls)), {\n    [`${skeletonButtonCls}-lg`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightLG, calc))\n  }), genSkeletonElementButtonShape(token, controlHeightLG, `${skeletonButtonCls}-lg`)), {\n    [`${skeletonButtonCls}-sm`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightSM, calc))\n  }), genSkeletonElementButtonShape(token, controlHeightSM, `${skeletonButtonCls}-sm`));\n};\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    skeletonAvatarCls,\n    skeletonTitleCls,\n    skeletonParagraphCls,\n    skeletonButtonCls,\n    skeletonInputCls,\n    skeletonImageCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor,\n    padding,\n    marginSM,\n    borderRadius,\n    titleHeight,\n    blockRadius,\n    paragraphLiHeight,\n    controlHeightXS,\n    paragraphMarginTop\n  } = token;\n  return {\n    [`${componentCls}`]: {\n      display: 'table',\n      width: '100%',\n      [`${componentCls}-header`]: {\n        display: 'table-cell',\n        paddingInlineEnd: padding,\n        verticalAlign: 'top',\n        // Avatar\n        [`${skeletonAvatarCls}`]: Object.assign({\n          display: 'inline-block',\n          verticalAlign: 'top',\n          background: gradientFromColor\n        }, genSkeletonElementAvatarSize(controlHeight)),\n        [`${skeletonAvatarCls}-circle`]: {\n          borderRadius: '50%'\n        },\n        [`${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n        [`${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n      },\n      [`${componentCls}-content`]: {\n        display: 'table-cell',\n        width: '100%',\n        verticalAlign: 'top',\n        // Title\n        [`${skeletonTitleCls}`]: {\n          width: '100%',\n          height: titleHeight,\n          background: gradientFromColor,\n          borderRadius: blockRadius,\n          [`+ ${skeletonParagraphCls}`]: {\n            marginBlockStart: controlHeightSM\n          }\n        },\n        // paragraph\n        [`${skeletonParagraphCls}`]: {\n          padding: 0,\n          '> li': {\n            width: '100%',\n            height: paragraphLiHeight,\n            listStyle: 'none',\n            background: gradientFromColor,\n            borderRadius: blockRadius,\n            '+ li': {\n              marginBlockStart: controlHeightXS\n            }\n          }\n        },\n        [`${skeletonParagraphCls}> li:last-child:not(:first-child):not(:nth-child(2))`]: {\n          width: '61%'\n        }\n      },\n      [`&-round ${componentCls}-content`]: {\n        [`${skeletonTitleCls}, ${skeletonParagraphCls} > li`]: {\n          borderRadius\n        }\n      }\n    },\n    [`${componentCls}-with-avatar ${componentCls}-content`]: {\n      // Title\n      [`${skeletonTitleCls}`]: {\n        marginBlockStart: marginSM,\n        [`+ ${skeletonParagraphCls}`]: {\n          marginBlockStart: paragraphMarginTop\n        }\n      }\n    },\n    // Skeleton element\n    [`${componentCls}${componentCls}-element`]: Object.assign(Object.assign(Object.assign(Object.assign({\n      display: 'inline-block',\n      width: 'auto'\n    }, genSkeletonElementButton(token)), genSkeletonElementAvatar(token)), genSkeletonElementInput(token)), genSkeletonElementImage(token)),\n    // Skeleton Block Button, Input\n    [`${componentCls}${componentCls}-block`]: {\n      width: '100%',\n      [`${skeletonButtonCls}`]: {\n        width: '100%'\n      },\n      [`${skeletonInputCls}`]: {\n        width: '100%'\n      }\n    },\n    // With active animation\n    [`${componentCls}${componentCls}-active`]: {\n      [`\n        ${skeletonTitleCls},\n        ${skeletonParagraphCls} > li,\n        ${skeletonAvatarCls},\n        ${skeletonButtonCls},\n        ${skeletonInputCls},\n        ${skeletonImageCls}\n      `]: Object.assign({}, genSkeletonColor(token))\n    }\n  };\n};\n// ============================== Export ==============================\nexport const prepareComponentToken = token => {\n  const {\n    colorFillContent,\n    colorFill\n  } = token;\n  const gradientFromColor = colorFillContent;\n  const gradientToColor = colorFill;\n  return {\n    color: gradientFromColor,\n    colorGradientEnd: gradientToColor,\n    gradientFromColor,\n    gradientToColor,\n    titleHeight: token.controlHeight / 2,\n    blockRadius: token.borderRadiusSM,\n    paragraphMarginTop: token.marginLG + token.marginXXS,\n    paragraphLiHeight: token.controlHeight / 2\n  };\n};\nexport default genStyleHooks('Skeleton', token => {\n  const {\n    componentCls,\n    calc\n  } = token;\n  const skeletonToken = mergeToken(token, {\n    skeletonAvatarCls: `${componentCls}-avatar`,\n    skeletonTitleCls: `${componentCls}-title`,\n    skeletonParagraphCls: `${componentCls}-paragraph`,\n    skeletonButtonCls: `${componentCls}-button`,\n    skeletonInputCls: `${componentCls}-input`,\n    skeletonImageCls: `${componentCls}-image`,\n    imageSizeBase: calc(token.controlHeight).mul(1.5).equal(),\n    borderRadius: 100,\n    // Large number to make capsule shape\n    skeletonLoadingBackground: `linear-gradient(90deg, ${token.gradientFromColor} 25%, ${token.gradientToColor} 37%, ${token.gradientFromColor} 63%)`,\n    skeletonLoadingMotionDuration: '1.4s'\n  });\n  return [genBaseStyle(skeletonToken)];\n}, prepareComponentToken, {\n  deprecatedTokens: [['color', 'gradientFromColor'], ['colorGradientEnd', 'gradientToColor']]\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport SkeletonAvatar from './Avatar';\nimport SkeletonButton from './Button';\nimport Element from './Element';\nimport SkeletonImage from './Image';\nimport SkeletonInput from './Input';\nimport SkeletonNode from './Node';\nimport Paragraph from './Paragraph';\nimport Title from './Title';\nimport useStyle from './style';\nfunction getComponentProps(prop) {\n  if (prop && typeof prop === 'object') {\n    return prop;\n  }\n  return {};\n}\nfunction getAvatarBasicProps(hasTitle, hasParagraph) {\n  if (hasTitle && !hasParagraph) {\n    // Square avatar\n    return {\n      size: 'large',\n      shape: 'square'\n    };\n  }\n  return {\n    size: 'large',\n    shape: 'circle'\n  };\n}\nfunction getTitleBasicProps(hasAvatar, hasParagraph) {\n  if (!hasAvatar && hasParagraph) {\n    return {\n      width: '38%'\n    };\n  }\n  if (hasAvatar && hasParagraph) {\n    return {\n      width: '50%'\n    };\n  }\n  return {};\n}\nfunction getParagraphBasicProps(hasAvatar, hasTitle) {\n  const basicProps = {};\n  // Width\n  if (!hasAvatar || !hasTitle) {\n    basicProps.width = '61%';\n  }\n  // Rows\n  if (!hasAvatar && hasTitle) {\n    basicProps.rows = 3;\n  } else {\n    basicProps.rows = 2;\n  }\n  return basicProps;\n}\nconst Skeleton = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    loading,\n    className,\n    rootClassName,\n    style,\n    children,\n    avatar = false,\n    title = true,\n    paragraph = true,\n    active,\n    round\n  } = props;\n  const {\n    getPrefixCls,\n    direction,\n    skeleton\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  if (loading || !('loading' in props)) {\n    const hasAvatar = !!avatar;\n    const hasTitle = !!title;\n    const hasParagraph = !!paragraph;\n    // Avatar\n    let avatarNode;\n    if (hasAvatar) {\n      const avatarProps = Object.assign(Object.assign({\n        prefixCls: \"\".concat(prefixCls, \"-avatar\")\n      }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar));\n      // We direct use SkeletonElement as avatar in skeleton internal.\n      avatarNode = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-header\")\n      }, /*#__PURE__*/React.createElement(Element, Object.assign({}, avatarProps)));\n    }\n    let contentNode;\n    if (hasTitle || hasParagraph) {\n      // Title\n      let $title;\n      if (hasTitle) {\n        const titleProps = Object.assign(Object.assign({\n          prefixCls: \"\".concat(prefixCls, \"-title\")\n        }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));\n        $title = /*#__PURE__*/React.createElement(Title, Object.assign({}, titleProps));\n      }\n      // Paragraph\n      let paragraphNode;\n      if (hasParagraph) {\n        const paragraphProps = Object.assign(Object.assign({\n          prefixCls: \"\".concat(prefixCls, \"-paragraph\")\n        }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));\n        paragraphNode = /*#__PURE__*/React.createElement(Paragraph, Object.assign({}, paragraphProps));\n      }\n      contentNode = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-content\")\n      }, $title, paragraphNode);\n    }\n    const cls = classNames(prefixCls, {\n      [\"\".concat(prefixCls, \"-with-avatar\")]: hasAvatar,\n      [\"\".concat(prefixCls, \"-active\")]: active,\n      [\"\".concat(prefixCls, \"-rtl\")]: direction === 'rtl',\n      [\"\".concat(prefixCls, \"-round\")]: round\n    }, skeleton === null || skeleton === void 0 ? void 0 : skeleton.className, className, rootClassName, hashId, cssVarCls);\n    return wrapCSSVar( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls,\n      style: Object.assign(Object.assign({}, skeleton === null || skeleton === void 0 ? void 0 : skeleton.style), style)\n    }, avatarNode, contentNode));\n  }\n  return children !== null && children !== void 0 ? children : null;\n};\nSkeleton.Button = SkeletonButton;\nSkeleton.Avatar = SkeletonAvatar;\nSkeleton.Input = SkeletonInput;\nSkeleton.Image = SkeletonImage;\nSkeleton.Node = SkeletonNode;\nif (process.env.NODE_ENV !== 'production') {\n  Skeleton.displayName = 'Skeleton';\n}\nexport default Skeleton;","map":{"version":3,"names":["classNames","React","ConfigContext","SkeletonAvatar","SkeletonButton","Element","SkeletonImage","SkeletonInput","SkeletonNode","Paragraph","Title","useStyle","getComponentProps","prop","getAvatarBasicProps","hasTitle","hasParagraph","size","shape","getTitleBasicProps","hasAvatar","width","getParagraphBasicProps","basicProps","rows","Skeleton","props","prefixCls","customizePrefixCls","loading","className","rootClassName","style","children","avatar","title","paragraph","active","round","getPrefixCls","direction","skeleton","useContext","wrapCSSVar","hashId","cssVarCls","avatarNode","avatarProps","Object","assign","concat","createElement","contentNode","$title","titleProps","paragraphNode","paragraphProps","cls","Button","Avatar","Input","Image","Node","process","env","NODE_ENV","displayName"],"sources":["/Users/saravanan/node_modules/antd/es/skeleton/Skeleton.js"],"sourcesContent":["\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport SkeletonAvatar from './Avatar';\nimport SkeletonButton from './Button';\nimport Element from './Element';\nimport SkeletonImage from './Image';\nimport SkeletonInput from './Input';\nimport SkeletonNode from './Node';\nimport Paragraph from './Paragraph';\nimport Title from './Title';\nimport useStyle from './style';\nfunction getComponentProps(prop) {\n  if (prop && typeof prop === 'object') {\n    return prop;\n  }\n  return {};\n}\nfunction getAvatarBasicProps(hasTitle, hasParagraph) {\n  if (hasTitle && !hasParagraph) {\n    // Square avatar\n    return {\n      size: 'large',\n      shape: 'square'\n    };\n  }\n  return {\n    size: 'large',\n    shape: 'circle'\n  };\n}\nfunction getTitleBasicProps(hasAvatar, hasParagraph) {\n  if (!hasAvatar && hasParagraph) {\n    return {\n      width: '38%'\n    };\n  }\n  if (hasAvatar && hasParagraph) {\n    return {\n      width: '50%'\n    };\n  }\n  return {};\n}\nfunction getParagraphBasicProps(hasAvatar, hasTitle) {\n  const basicProps = {};\n  // Width\n  if (!hasAvatar || !hasTitle) {\n    basicProps.width = '61%';\n  }\n  // Rows\n  if (!hasAvatar && hasTitle) {\n    basicProps.rows = 3;\n  } else {\n    basicProps.rows = 2;\n  }\n  return basicProps;\n}\nconst Skeleton = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    loading,\n    className,\n    rootClassName,\n    style,\n    children,\n    avatar = false,\n    title = true,\n    paragraph = true,\n    active,\n    round\n  } = props;\n  const {\n    getPrefixCls,\n    direction,\n    skeleton\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  if (loading || !('loading' in props)) {\n    const hasAvatar = !!avatar;\n    const hasTitle = !!title;\n    const hasParagraph = !!paragraph;\n    // Avatar\n    let avatarNode;\n    if (hasAvatar) {\n      const avatarProps = Object.assign(Object.assign({\n        prefixCls: `${prefixCls}-avatar`\n      }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar));\n      // We direct use SkeletonElement as avatar in skeleton internal.\n      avatarNode = /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-header`\n      }, /*#__PURE__*/React.createElement(Element, Object.assign({}, avatarProps)));\n    }\n    let contentNode;\n    if (hasTitle || hasParagraph) {\n      // Title\n      let $title;\n      if (hasTitle) {\n        const titleProps = Object.assign(Object.assign({\n          prefixCls: `${prefixCls}-title`\n        }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));\n        $title = /*#__PURE__*/React.createElement(Title, Object.assign({}, titleProps));\n      }\n      // Paragraph\n      let paragraphNode;\n      if (hasParagraph) {\n        const paragraphProps = Object.assign(Object.assign({\n          prefixCls: `${prefixCls}-paragraph`\n        }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));\n        paragraphNode = /*#__PURE__*/React.createElement(Paragraph, Object.assign({}, paragraphProps));\n      }\n      contentNode = /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-content`\n      }, $title, paragraphNode);\n    }\n    const cls = classNames(prefixCls, {\n      [`${prefixCls}-with-avatar`]: hasAvatar,\n      [`${prefixCls}-active`]: active,\n      [`${prefixCls}-rtl`]: direction === 'rtl',\n      [`${prefixCls}-round`]: round\n    }, skeleton === null || skeleton === void 0 ? void 0 : skeleton.className, className, rootClassName, hashId, cssVarCls);\n    return wrapCSSVar( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls,\n      style: Object.assign(Object.assign({}, skeleton === null || skeleton === void 0 ? void 0 : skeleton.style), style)\n    }, avatarNode, contentNode));\n  }\n  return children !== null && children !== void 0 ? children : null;\n};\nSkeleton.Button = SkeletonButton;\nSkeleton.Avatar = SkeletonAvatar;\nSkeleton.Input = SkeletonInput;\nSkeleton.Image = SkeletonImage;\nSkeleton.Node = SkeletonNode;\nif (process.env.NODE_ENV !== 'production') {\n  Skeleton.displayName = 'Skeleton';\n}\nexport default Skeleton;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { isPresetColor } from '../_util/colors';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style/ribbon';\nconst Ribbon = props => {\n  const {\n    className,\n    prefixCls: customizePrefixCls,\n    style,\n    color,\n    children,\n    text,\n    placement = 'end',\n    rootClassName\n  } = props;\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('ribbon', customizePrefixCls);\n  const wrapperCls = \"\".concat(prefixCls, \"-wrapper\");\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls, wrapperCls);\n  const colorInPreset = isPresetColor(color, false);\n  const ribbonCls = classNames(prefixCls, \"\".concat(prefixCls, \"-placement-\").concat(placement), {\n    [\"\".concat(prefixCls, \"-rtl\")]: direction === 'rtl',\n    [\"\".concat(prefixCls, \"-color-\").concat(color)]: colorInPreset\n  }, className);\n  const colorStyle = {};\n  const cornerColorStyle = {};\n  if (color && !colorInPreset) {\n    colorStyle.background = color;\n    cornerColorStyle.color = color;\n  }\n  return wrapCSSVar( /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(wrapperCls, rootClassName, hashId, cssVarCls)\n  }, children, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(ribbonCls, hashId),\n    style: Object.assign(Object.assign({}, colorStyle), style)\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-text\")\n  }, text), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-corner\"),\n    style: cornerColorStyle\n  }))));\n};\nif (process.env.NODE_ENV !== 'production') {\n  Ribbon.displayName = 'Ribbon';\n}\nexport default Ribbon;","map":{"version":3,"names":["React","classNames","isPresetColor","ConfigContext","useStyle","Ribbon","props","className","prefixCls","customizePrefixCls","style","color","children","text","placement","rootClassName","getPrefixCls","direction","useContext","wrapperCls","concat","wrapCSSVar","hashId","cssVarCls","colorInPreset","ribbonCls","colorStyle","cornerColorStyle","background","createElement","Object","assign","process","env","NODE_ENV","displayName"],"sources":["/Users/saravanan/node_modules/antd/es/badge/Ribbon.js"],"sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { isPresetColor } from '../_util/colors';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style/ribbon';\nconst Ribbon = props => {\n  const {\n    className,\n    prefixCls: customizePrefixCls,\n    style,\n    color,\n    children,\n    text,\n    placement = 'end',\n    rootClassName\n  } = props;\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('ribbon', customizePrefixCls);\n  const wrapperCls = `${prefixCls}-wrapper`;\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls, wrapperCls);\n  const colorInPreset = isPresetColor(color, false);\n  const ribbonCls = classNames(prefixCls, `${prefixCls}-placement-${placement}`, {\n    [`${prefixCls}-rtl`]: direction === 'rtl',\n    [`${prefixCls}-color-${color}`]: colorInPreset\n  }, className);\n  const colorStyle = {};\n  const cornerColorStyle = {};\n  if (color && !colorInPreset) {\n    colorStyle.background = color;\n    cornerColorStyle.color = color;\n  }\n  return wrapCSSVar( /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(wrapperCls, rootClassName, hashId, cssVarCls)\n  }, children, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(ribbonCls, hashId),\n    style: Object.assign(Object.assign({}, colorStyle), style)\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: `${prefixCls}-text`\n  }, text), /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-corner`,\n    style: cornerColorStyle\n  }))));\n};\nif (process.env.NODE_ENV !== 'production') {\n  Ribbon.displayName = 'Ribbon';\n}\nexport default Ribbon;"],"mappings":"AAAA,YAAY;;AAEZ,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,UAAU,MAAM,YAAY;AACnC,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,aAAa,QAAQ,oBAAoB;AAClD,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,MAAMC,MAAM,GAAGC,KAAK,IAAI;EACtB,MAAM;IACJC,SAAS;IACTC,SAAS,EAAEC,kBAAkB;IAC7BC,KAAK;IACLC,KAAK;IACLC,QAAQ;IACRC,IAAI;IACJC,SAAS,GAAG,KAAK;IACjBC;EACF,CAAC,GAAGT,KAAK;EACT,MAAM;IACJU,YAAY;IACZC;EACF,CAAC,GAAGjB,KAAK,CAACkB,UAAU,CAACf,aAAa,CAAC;EACnC,MAAMK,SAAS,GAAGQ,YAAY,CAAC,QAAQ,EAAEP,kBAAkB,CAAC;EAC5D,MAAMU,UAAU,MAAAC,MAAA,CAAMZ,SAAS,aAAU;EACzC,MAAM,CAACa,UAAU,EAAEC,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAACI,SAAS,EAAEW,UAAU,CAAC;EACvE,MAAMK,aAAa,GAAGtB,aAAa,CAACS,KAAK,EAAE,KAAK,CAAC;EACjD,MAAMc,SAAS,GAAGxB,UAAU,CAACO,SAAS,KAAAY,MAAA,CAAKZ,SAAS,iBAAAY,MAAA,CAAcN,SAAS,GAAI;IAC7E,IAAAM,MAAA,CAAIZ,SAAS,YAASS,SAAS,KAAK,KAAK;IACzC,IAAAG,MAAA,CAAIZ,SAAS,aAAAY,MAAA,CAAUT,KAAK,IAAKa;EACnC,CAAC,EAAEjB,SAAS,CAAC;EACb,MAAMmB,UAAU,GAAG,CAAC,CAAC;EACrB,MAAMC,gBAAgB,GAAG,CAAC,CAAC;EAC3B,IAAIhB,KAAK,IAAI,CAACa,aAAa,EAAE;IAC3BE,UAAU,CAACE,UAAU,GAAGjB,KAAK;IAC7BgB,gBAAgB,CAAChB,KAAK,GAAGA,KAAK;EAChC;EACA,OAAOU,UAAU,EAAE,aAAarB,KAAK,CAAC6B,aAAa,CAAC,KAAK,EAAE;IACzDtB,SAAS,EAAEN,UAAU,CAACkB,UAAU,EAAEJ,aAAa,EAAEO,MAAM,EAAEC,SAAS;EACpE,CAAC,EAAEX,QAAQ,EAAE,aAAaZ,KAAK,CAAC6B,aAAa,CAAC,KAAK,EAAE;IACnDtB,SAAS,EAAEN,UAAU,CAACwB,SAAS,EAAEH,MAAM,CAAC;IACxCZ,KAAK,EAAEoB,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,UAAU,CAAC,EAAEhB,KAAK;EAC3D,CAAC,EAAE,aAAaV,KAAK,CAAC6B,aAAa,CAAC,MAAM,EAAE;IAC1CtB,SAAS,KAAAa,MAAA,CAAKZ,SAAS;EACzB,CAAC,EAAEK,IAAI,CAAC,EAAE,aAAab,KAAK,CAAC6B,aAAa,CAAC,KAAK,EAAE;IAChDtB,SAAS,KAAAa,MAAA,CAAKZ,SAAS,YAAS;IAChCE,KAAK,EAAEiB;EACT,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC;AACD,IAAIK,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzC7B,MAAM,CAAC8B,WAAW,GAAG,QAAQ;AAC/B;AACA,eAAe9B,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
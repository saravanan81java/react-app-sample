{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { prepareComponentToken, prepareToken } from '.';\nimport { resetComponent } from '../../style';\nimport { genPresetColor, genStyleHooks } from '../../theme/internal';\n// ============================== Ribbon ==============================\nconst genRibbonStyle = token => {\n  const {\n    antCls,\n    badgeFontHeight,\n    marginXS,\n    badgeRibbonOffset,\n    calc\n  } = token;\n  const ribbonPrefixCls = \"\".concat(antCls, \"-ribbon\");\n  const ribbonWrapperPrefixCls = \"\".concat(antCls, \"-ribbon-wrapper\");\n  const statusRibbonPreset = genPresetColor(token, (colorKey, _ref) => {\n    let {\n      darkColor\n    } = _ref;\n    return {\n      [\"&\".concat(ribbonPrefixCls, \"-color-\").concat(colorKey)]: {\n        background: darkColor,\n        color: darkColor\n      }\n    };\n  });\n  return {\n    [\"\".concat(ribbonWrapperPrefixCls)]: {\n      position: 'relative'\n    },\n    [\"\".concat(ribbonPrefixCls)]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      top: marginXS,\n      padding: \"0 \".concat(unit(token.paddingXS)),\n      color: token.colorPrimary,\n      lineHeight: unit(badgeFontHeight),\n      whiteSpace: 'nowrap',\n      backgroundColor: token.colorPrimary,\n      borderRadius: token.borderRadiusSM,\n      [\"\".concat(ribbonPrefixCls, \"-text\")]: {\n        color: token.colorTextLightSolid\n      },\n      [\"\".concat(ribbonPrefixCls, \"-corner\")]: {\n        position: 'absolute',\n        top: '100%',\n        width: badgeRibbonOffset,\n        height: badgeRibbonOffset,\n        color: 'currentcolor',\n        border: \"\".concat(unit(calc(badgeRibbonOffset).div(2).equal()), \" solid\"),\n        transform: token.badgeRibbonCornerTransform,\n        transformOrigin: 'top',\n        filter: token.badgeRibbonCornerFilter\n      }\n    }), statusRibbonPreset), {\n      [\"&\".concat(ribbonPrefixCls, \"-placement-end\")]: {\n        insetInlineEnd: calc(badgeRibbonOffset).mul(-1).equal(),\n        borderEndEndRadius: 0,\n        [\"\".concat(ribbonPrefixCls, \"-corner\")]: {\n          insetInlineEnd: 0,\n          borderInlineEndColor: 'transparent',\n          borderBlockEndColor: 'transparent'\n        }\n      },\n      [\"&\".concat(ribbonPrefixCls, \"-placement-start\")]: {\n        insetInlineStart: calc(badgeRibbonOffset).mul(-1).equal(),\n        borderEndStartRadius: 0,\n        [\"\".concat(ribbonPrefixCls, \"-corner\")]: {\n          insetInlineStart: 0,\n          borderBlockEndColor: 'transparent',\n          borderInlineStartColor: 'transparent'\n        }\n      },\n      // ====================== RTL =======================\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  };\n};\n// ============================== Export ==============================\nexport default genStyleHooks(['Badge', 'Ribbon'], token => {\n  const badgeToken = prepareToken(token);\n  return genRibbonStyle(badgeToken);\n}, prepareComponentToken);","map":{"version":3,"names":["unit","prepareComponentToken","prepareToken","resetComponent","genPresetColor","genStyleHooks","genRibbonStyle","token","antCls","badgeFontHeight","marginXS","badgeRibbonOffset","calc","ribbonPrefixCls","concat","ribbonWrapperPrefixCls","statusRibbonPreset","colorKey","_ref","darkColor","background","color","position","Object","assign","top","padding","paddingXS","colorPrimary","lineHeight","whiteSpace","backgroundColor","borderRadius","borderRadiusSM","colorTextLightSolid","width","height","border","div","equal","transform","badgeRibbonCornerTransform","transformOrigin","filter","badgeRibbonCornerFilter","insetInlineEnd","mul","borderEndEndRadius","borderInlineEndColor","borderBlockEndColor","insetInlineStart","borderEndStartRadius","borderInlineStartColor","direction","badgeToken"],"sources":["/Users/saravanan/node_modules/antd/es/badge/style/ribbon.js"],"sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { prepareComponentToken, prepareToken } from '.';\nimport { resetComponent } from '../../style';\nimport { genPresetColor, genStyleHooks } from '../../theme/internal';\n// ============================== Ribbon ==============================\nconst genRibbonStyle = token => {\n  const {\n    antCls,\n    badgeFontHeight,\n    marginXS,\n    badgeRibbonOffset,\n    calc\n  } = token;\n  const ribbonPrefixCls = `${antCls}-ribbon`;\n  const ribbonWrapperPrefixCls = `${antCls}-ribbon-wrapper`;\n  const statusRibbonPreset = genPresetColor(token, (colorKey, _ref) => {\n    let {\n      darkColor\n    } = _ref;\n    return {\n      [`&${ribbonPrefixCls}-color-${colorKey}`]: {\n        background: darkColor,\n        color: darkColor\n      }\n    };\n  });\n  return {\n    [`${ribbonWrapperPrefixCls}`]: {\n      position: 'relative'\n    },\n    [`${ribbonPrefixCls}`]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      top: marginXS,\n      padding: `0 ${unit(token.paddingXS)}`,\n      color: token.colorPrimary,\n      lineHeight: unit(badgeFontHeight),\n      whiteSpace: 'nowrap',\n      backgroundColor: token.colorPrimary,\n      borderRadius: token.borderRadiusSM,\n      [`${ribbonPrefixCls}-text`]: {\n        color: token.colorTextLightSolid\n      },\n      [`${ribbonPrefixCls}-corner`]: {\n        position: 'absolute',\n        top: '100%',\n        width: badgeRibbonOffset,\n        height: badgeRibbonOffset,\n        color: 'currentcolor',\n        border: `${unit(calc(badgeRibbonOffset).div(2).equal())} solid`,\n        transform: token.badgeRibbonCornerTransform,\n        transformOrigin: 'top',\n        filter: token.badgeRibbonCornerFilter\n      }\n    }), statusRibbonPreset), {\n      [`&${ribbonPrefixCls}-placement-end`]: {\n        insetInlineEnd: calc(badgeRibbonOffset).mul(-1).equal(),\n        borderEndEndRadius: 0,\n        [`${ribbonPrefixCls}-corner`]: {\n          insetInlineEnd: 0,\n          borderInlineEndColor: 'transparent',\n          borderBlockEndColor: 'transparent'\n        }\n      },\n      [`&${ribbonPrefixCls}-placement-start`]: {\n        insetInlineStart: calc(badgeRibbonOffset).mul(-1).equal(),\n        borderEndStartRadius: 0,\n        [`${ribbonPrefixCls}-corner`]: {\n          insetInlineStart: 0,\n          borderBlockEndColor: 'transparent',\n          borderInlineStartColor: 'transparent'\n        }\n      },\n      // ====================== RTL =======================\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  };\n};\n// ============================== Export ==============================\nexport default genStyleHooks(['Badge', 'Ribbon'], token => {\n  const badgeToken = prepareToken(token);\n  return genRibbonStyle(badgeToken);\n}, prepareComponentToken);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}